options {
    STATIC = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(JSON)

import java.io.StringReader;
import java.io.Reader;
import java.util.Map;
import java.util.Arrays;
import java.util.HashMap;

public class JSON {

    private final Map<String,Object> _map = new HashMap<String,Object>();

    public static void main(String args[]) {
        try
        {
              JSON json = new JSON(System.in);
              Map<String,Object> map = json.parseObject();
			  System.out.println(Arrays.toString(map.entrySet().toArray()));
        } catch(Exception e) {
              e.printStackTrace();
        }
    }
}

PARSER_END(JSON)

SKIP :
{
      " " 
    | "\t" 
    | "\r" 
    | "\n"
}

TOKEN :
{
      <LBRACE: "{">
    | <RBRACE: "}">
    | <COLON: ":">
    | <COMMA: ",">
    | <TRUE: "true">
    | <FALSE: "false">
    | <STRING: "\"" (~["\""])* "\"">
}

Map<String,Object> parseObject() :
{
}
{
    object() <EOF>
	{ return _map; }
}

void object() :
{
}
{
    <LBRACE> [ member() ( <COMMA> member() )*  ] <RBRACE>
}

void member() :
{
    Token key;
    Object value;
}
{
    key = <STRING> <COLON> value = value()
    { _map.put(key.image, value); } 
}

Object value() :
{
    Object value;
}
{
    (  value = bool()
    |  value = string()
    )
    { return value; }
}

String string() :
{
    Token t;
}
{
    t = <STRING>
    { return t.image; }
}

Boolean bool() :
{
}
{
    ( <TRUE> 
      { return Boolean.TRUE; }
    | <FALSE>
      { return Boolean.FALSE; }
    )
}
